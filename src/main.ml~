open Graph
open Dsatur
open Unix
open TestGraph

(** [lister_fichiers repertoire] renvoie la liste des fichiers dans un répertoire donné. *)
let lister_fichiers repertoire =
  try
    Array.to_list (Sys.readdir repertoire)
    |> List.filter (fun fichier -> Filename.check_suffix fichier ".col")
  with
  | Sys_error err ->
    Printf.printf "Erreur : %s\n" err;
    []

(** [afficher_menu_fichiers fichiers] affiche un menu pour sélectionner un fichier. *)
let afficher_menu_fichiers fichiers =
  Printf.printf "Fichiers disponibles dans le répertoire :\n";
  List.iteri (fun i fichier ->
    Printf.printf "%d. %s\n" (i + 1) fichier
  ) fichiers;
  Printf.printf "0. Retourner au menu principal\n";
  Printf.printf "Votre choix : "

(** [tester_fichier fichier] lit et colore le graphe contenu dans un fichier. *)
let tester_fichier fichier =
  let graphe = lire_graphe fichier in
  Printf.printf "Test du fichier : %s\n" fichier;
  let nb_couleurs = dsatur_with_tas graphe in
  Printf.printf "Nombre de couleurs utilisées : %d\n" nb_couleurs;
  Printf.printf "-------------------------------------\n"

(** [tester_fichiers repertoire] permet à l'utilisateur de tester des graphes depuis des fichiers. *)
let tester_fichiers repertoire =
  let rec boucle () =
    let fichiers = lister_fichiers repertoire in
    if fichiers = [] then
      Printf.printf "Aucun fichier .col trouvé dans le répertoire %s\n" repertoire
    else begin
      afficher_menu_fichiers fichiers;
      match read_int_opt () with
      | Some 0 -> Printf.printf "Retour au menu principal.\n"
      | Some n when n > 0 && n <= List.length fichiers ->
        let fichier = List.nth fichiers (n - 1) in
        tester_fichier (Filename.concat repertoire fichier);
        boucle ()
      | _ ->
        Printf.printf "Choix invalide. Veuillez réessayer.\n";
        boucle ()
    end
  in
  boucle ()

(** [afficher_menu_principal ()] affiche le menu principal. *)
let afficher_menu_principal () =
  Printf.printf "Menu principal :\n";
  Printf.printf "1. Tester des graphes prédéfinis\n";
  Printf.printf "2. Tester des graphes depuis des fichiers\n";
  Printf.printf "0. Quitter\n";
  Printf.printf "Votre choix : "

let afficher_menu graphes =
  Printf.printf "Sélectionnez un graphe à tester :\n";
  Array.iteri (fun i (nom, _) ->
    Printf.printf "%d. %s\n" (i + 1) nom
  ) graphes;
  Printf.printf "0. Quitter\n";
  Printf.printf "Votre choix : "

let test_graphes () =
  (* Liste des graphes disponibles avec leurs noms *)
  let graphes = [|
    ("Graphe complet K5", graphe_complet_k5);
    ("Graphe biparti K3,3", graphe_biparti_k33);
    ("Cycle impair C5", graphe_cycle_c5);
    ("Graphe en étoile", graphe_etoile);
    ("Graphe arbre binaire", graphe_arbre_binaire);
    ("Graphe Myciel6", desorienter_graphe (lire_graphe "test/myciel6.col"))
  |] in

  let rec boucle () =
    afficher_menu graphes;
    let choix = read_int_opt () in
    match choix with
    | Some 0 -> Printf.printf "Au revoir !\n"
    | Some n when n > 0 && n <= Array.length graphes ->
      let (nom, graphe) = graphes.(n - 1) in
      Printf.printf "Test du graphe : %s\n" nom;
      let nb_couleurs = dsatur_with_tas graphe in
      Printf.printf "Nombre de couleurs utilisées : %d\n" nb_couleurs;
      Printf.printf "-------------------------------------\n";
      boucle ()
    | _ ->
      Printf.printf "Choix invalide. Veuillez réessayer.\n";
      boucle ()
  in
  boucle ()

(** [menu_principal ()] gère le menu principal. *)
let menu_principal () =
  let rec boucle () =
    afficher_menu_principal ();
    match read_int_opt () with
    | Some 0 -> Printf.printf "Au revoir !\n"
    | Some 1 ->
      test_graphes ();
      boucle ()
    | Some 2 ->
      tester_fichiers "test"; (* Le répertoire des fichiers de test *)
      boucle ()
    | _ ->
      Printf.printf "Choix invalide. Veuillez réessayer.\n";
      boucle ()
  in
  boucle ()

(** Point d'entrée principal du programme. *)
let () =
  Printf.printf "Début du programme\n";
  menu_principal ();
  Printf.printf "Fin du programme\n"
